{"version":3,"file":"237-b122db2cfcb265cb9b53.js","mappings":"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","sources":["webpack://webia_front/./src/templatesReact/miniSiteShopTemplate/AddProductItemModalContent.tsx","webpack://webia_front/./src/templatesReact/miniSiteShopTemplate/AddProductItemModal.tsx","webpack://webia_front/./src/templatesReact/miniSiteShopTemplate/RemoveProductItemModalContent.tsx","webpack://webia_front/./src/templatesReact/miniSiteShopTemplate/RemoveProductItemModal.tsx","webpack://webia_front/./src/templatesReact/miniSiteShopTemplate/Content.tsx","webpack://webia_front/./src/templatesReact/miniSiteShopTemplate/MiniSiteShopTemplate.tsx","webpack://webia_front/./src/pagesReact/miniSiteShopPage/MiniSiteShopPage.tsx"],"sourcesContent":["import mscs from '../miniSiteCommon/styleCommon/style.module.scss';\nimport React, { memo, useContext, useState } from 'react';\nimport { CustomButton } from 'components/CustomButton/CustomButton';\nimport { MiniSiteContext } from 'templatesReact/miniSiteCommon/Context';\nimport { CustomInput } from 'components/CustomInput/CustomInput';\nimport { CustomSelectFile } from 'components/CustomInput/CustomSelectFile';\nimport { generateUUID } from 'utils/utils';\nimport { ProductItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = {\n  onClose: () => void\n  selectedItem?: ProductItemT\n}\n\nconst AddProductItemModalContent = memo((props: PropsT) => {\n  const {\n    onClose,\n    selectedItem,\n  } = props;\n\n  const { addProductItem, editProductItem } = useContext(MiniSiteContext);\n\n  const [currentName, setCurrentName] = useState<string>(selectedItem\n    ? selectedItem.name\n    : ''\n  );\n  const [currentDescription, setCurrentDescription] = useState<string>(selectedItem\n    ? selectedItem.description\n    : ''\n  );\n  const [currentPrice, setCurrentPrice] = useState<string>(selectedItem\n    ? String(selectedItem.price)\n    : ''\n  );\n  const [currentImage, setCurrentImage] = useState<string | undefined>(\n    selectedItem?.imageUrl\n  );\n\n  const submit = () => {\n    if (!currentImage) return;\n    if (selectedItem) {\n      editProductItem(\n        selectedItem.id,\n        {\n          id: selectedItem.id,\n          name: currentName,\n          description: currentDescription,\n          price: +currentPrice || 0,\n          imageUrl: currentImage,\n        }\n      );\n      onClose();\n      return;\n    }\n    addProductItem({\n      id: generateUUID(),\n      name: currentName,\n      description: currentDescription,\n      price: +currentPrice || 0,\n      imageUrl: currentImage,\n    });\n    onClose();\n  };\n\n  return (\n    <div className={mscs.modalBody}>\n      <CustomSelectFile\n        htmlFor=\"newProduct\"\n        value={currentImage}\n        onChange={setCurrentImage}\n        variant='box'\n        label='Upload product image'\n      />\n\n      <CustomInput\n        placeholder='Product name'\n        value={currentName}\n        onChange={setCurrentName}\n      />\n\n      <CustomInput\n        placeholder='Product description'\n        value={currentDescription}\n        onChange={setCurrentDescription}\n      />\n\n      <CustomInput\n        placeholder='Product price'\n        type='number'\n        value={currentPrice}\n        onChange={setCurrentPrice}\n      />\n\n      <div className={mscs.modalButtonContainer}>\n        <CustomButton\n          text=\"Cancel\"\n          variant='outline'\n          size='l'\n          width='standard'\n          onClick={onClose}\n        />\n        <CustomButton\n          text={selectedItem ? 'Save changes' : 'Add product'}\n          variant='action'\n          size='l'\n          width='standard'\n          onClick={submit}\n        />\n      </div>\n    </div>\n  );\n});\n\nexport { AddProductItemModalContent };\n","import { Modal, ModalPublicProps } from 'components/modal/Modal';\nimport { useToggle } from 'hooks/useToggle';\nimport { AddProductItemModalContent } from './AddProductItemModalContent';\nimport { memo } from 'react';\nimport { ProductItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = ModalPublicProps & {\n  selectedItem?: ProductItemT;\n}\n\nconst AddProductItemModal = memo((props: PropsT) => {\n  const {\n    className,\n    isOpen,\n    onClose,\n    onOverlay,\n    onEscape,\n    selectedItem,\n  } = props;\n\n  const [triggerClosing, onTriggerClosing] = useToggle(false);\n\n  return (\n    <Modal\n      className={className}\n      title={selectedItem\n        ? selectedItem.name!\n        : 'New product'\n      }\n      widthSize='xl'\n      isOpen={isOpen}\n      onClose={onClose}\n      onOverlay={onOverlay}\n      onEscape={onEscape}\n      triggerClosing={triggerClosing}\n      onTriggerClosing={onTriggerClosing}\n    >\n      <AddProductItemModalContent\n        onClose={onTriggerClosing}\n        selectedItem={selectedItem}\n      />\n    </Modal>\n  );\n});\n\nexport { AddProductItemModal };\n","import mscs from '../miniSiteCommon/styleCommon/style.module.scss';\nimport React, { memo, useContext } from 'react';\nimport { CustomButton } from 'components/CustomButton/CustomButton';\nimport { MiniSiteContext } from 'templatesReact/miniSiteCommon/Context';\nimport { ProductItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = {\n  onClose: () => void\n  selectedItem?: ProductItemT\n}\n\nconst RemoveProductItemModalContent = memo((props: PropsT) => {\n  const {\n    onClose,\n    selectedItem,\n  } = props;\n\n  const { removeProductItem } = useContext(MiniSiteContext);\n\n  const submit = () => {\n    if (!selectedItem) return;\n    removeProductItem(selectedItem.id);\n    onClose();\n  };\n\n  return (\n    <div className={mscs.modalBody}>\n      <div className={mscs.modalRemoveText}>\n        It will be deleted permanently. But you can always add a new one.\n      </div>\n\n      <div className={`${mscs.modalButtonContainer} ${mscs.modalButtonCenter}`}>\n        <CustomButton\n          text=\"Cancel\"\n          variant='outline'\n          size='l'\n          width='standard'\n          onClick={onClose}\n        />\n        <CustomButton\n          text=\"Remove\"\n          variant='action'\n          size='l'\n          width='standard'\n          onClick={submit}\n        />\n      </div>\n    </div>\n  );\n});\n\nexport { RemoveProductItemModalContent };\n","import { Modal, ModalPublicProps } from 'components/modal/Modal';\nimport { useToggle } from 'hooks/useToggle';\nimport { memo } from 'react';\nimport { RemoveProductItemModalContent } from './RemoveProductItemModalContent';\nimport { ProductItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = ModalPublicProps & {\n  selectedItem?: ProductItemT;\n}\n\nconst RemoveProductItemModal = memo((props: PropsT) => {\n  const {\n    className,\n    isOpen,\n    onClose,\n    onOverlay,\n    onEscape,\n    selectedItem,\n  } = props;\n\n  const [triggerClosing, onTriggerClosing] = useToggle(false);\n\n  return (\n    <Modal\n      className={className}\n      title={`Are you sure that you want to delete product ${selectedItem?.name}?`}\n      widthSize='xs'\n      isOpen={isOpen}\n      onClose={onClose}\n      onOverlay={onOverlay}\n      onEscape={onEscape}\n      triggerClosing={triggerClosing}\n      onTriggerClosing={onTriggerClosing}\n    >\n      <RemoveProductItemModalContent\n        onClose={onTriggerClosing}\n        selectedItem={selectedItem}\n      />\n    </Modal>\n  );\n});\n\nexport { RemoveProductItemModal };\n","import mscs from '../miniSiteCommon/styleCommon/style.module.scss';\nimport { memo, useContext, useState } from 'react';\nimport { Shop } from '../miniSiteCommon/Shop';\nimport { MiniSiteContext } from '../miniSiteCommon/Context';\nimport { CustomButton } from 'components/CustomButton/CustomButton';\nimport { AddProductItemModal } from './AddProductItemModal';\nimport { RemoveProductItemModal } from './RemoveProductItemModal';\nimport { ProductItemT } from '../miniSiteCommon/types';\n\nconst Content = memo(() => {\n  const {\n    data: {\n      isEdit,\n      products,\n    },\n  } = useContext(MiniSiteContext);\n\n  const [ isOpenAdd, setIsOpenAdd ] = useState<boolean>(false);\n  const [ isOpenRemove, setIsOpenRemove ] = useState<boolean>(false);\n  const [ selectedItem, setSelectedItem ] = useState<ProductItemT | undefined>(undefined);\n\n  const selectItemForEdit = (id: string) => {\n    const foundedItem = products.find(item => item.id === id);\n    if (foundedItem) {\n      setSelectedItem(foundedItem);\n      setIsOpenAdd(true);\n    }\n  };\n  const unselectItemForEdit = () => {\n    setSelectedItem(undefined);\n    setIsOpenAdd(false);\n  };\n\n  const selectItemForRemove = (id: string) => {\n    const foundedItem = products.find(item => item.id === id);\n    if (foundedItem) {\n      setSelectedItem(foundedItem);\n      setIsOpenRemove(true);\n    }\n  };\n  const unselectItemForRemove = () => {\n    setSelectedItem(undefined);\n    setIsOpenRemove(false);\n  };\n\n  return (\n    <div className={mscs.contentBody}>\n      <div className={mscs.contentContainer}>\n        <Shop\n          products={products}\n          isEdit={isEdit}\n          titleSize='l'\n          childrenMore={isEdit && <CustomButton\n            text=\"Add product\"\n            variant='action'\n            size='l'\n            width='content'\n            onClick={() => setIsOpenAdd(true)}\n          />}\n          editCallback={selectItemForEdit}\n          removeCallback={selectItemForRemove}\n        />\n      </div>\n\n      <AddProductItemModal\n        isOpen={isOpenAdd}\n        onClose={unselectItemForEdit}\n        onOverlay={unselectItemForEdit}\n        onEscape={unselectItemForEdit}\n        selectedItem={selectedItem}\n      />\n      <RemoveProductItemModal\n        isOpen={isOpenRemove}\n        onClose={unselectItemForRemove}\n        onOverlay={unselectItemForRemove}\n        onEscape={unselectItemForRemove}\n        selectedItem={selectedItem}\n      />\n    </div>\n  );\n});\n\nexport { Content };\n","import mst from '../miniSiteCommon/styleTemplate/style.module.scss';\nimport { Header } from '../miniSiteCommon/header';\nimport { Content } from './Content';\nimport { Footer } from '../miniSiteCommon/footer';\nimport { PostFooter } from '../miniSiteCommon/postfooter';\nimport { memo, useContext, useEffect } from 'react';\nimport { MiniSiteDataT } from 'templatesReact/miniSiteCommon/types';\nimport MiniSiteProvider from 'templatesReact/miniSiteCommon/Provider';\nimport { MiniSiteContext } from 'templatesReact/miniSiteCommon/Context';\nimport { useNavigate } from 'react-router-dom';\nimport { AppRoutes } from 'pagesReact';\n\nconst MiniSiteShopTemplate = memo((props: MiniSiteDataT) => {\n  return (\n    <MiniSiteProvider>\n      <_MiniSiteShopTemplate {...props} />.\n    </MiniSiteProvider>\n  );\n});\n\nconst _MiniSiteShopTemplate = memo((props: MiniSiteDataT) => {\n  const { data: { isPremium }, setData } = useContext(MiniSiteContext);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    setData && setData(props);\n  }, [props]);\n\n  if (!isPremium) {\n    navigate(AppRoutes.MINI_SITE);\n  }\n\n  return <main className={mst.body}>\n    <Header />\n    <Content />\n    <Footer />\n    <PostFooter />\n  </main>;\n});\n\nexport { MiniSiteShopTemplate };\n","import { MiniSiteShopTemplate } from 'templatesReact/miniSiteShopTemplate';\nimport { dataMini } from 'pagesReact/miniSitePage/MiniSitePage';\n\nconst MiniSiteShopPage = () => {\n  return (\n    <MiniSiteShopTemplate\n      {...dataMini}\n    />\n  );\n};\n\nexport default MiniSiteShopPage;\n"],"names":["AddProductItemModalContent","memo","props","onClose","selectedItem","addProductItem","editProductItem","useContext","MiniSiteContext","currentName","setCurrentName","useState","name","currentDescription","setCurrentDescription","description","currentPrice","setCurrentPrice","String","price","currentImage","setCurrentImage","imageUrl","React","className","mscs","CustomSelectFile","htmlFor","value","onChange","variant","label","CustomInput","placeholder","type","CustomButton","text","size","width","onClick","submit","id","generateUUID","AddProductItemModal","isOpen","onOverlay","onEscape","triggerClosing","onTriggerClosing","useToggle","createElement","Modal","title","widthSize","RemoveProductItemModalContent","removeProductItem","RemoveProductItemModal","Content","data","isEdit","products","isOpenAdd","setIsOpenAdd","isOpenRemove","setIsOpenRemove","setSelectedItem","undefined","unselectItemForEdit","unselectItemForRemove","Shop","titleSize","childrenMore","editCallback","foundedItem","find","item","removeCallback","MiniSiteShopTemplate","MiniSiteProvider","_MiniSiteShopTemplate","isPremium","setData","navigate","useNavigate","useEffect","AppRoutes","MINI_SITE","mst","Header","Footer","PostFooter","MiniSiteShopPage","dataMini"],"sourceRoot":""}