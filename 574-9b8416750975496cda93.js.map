{"version":3,"file":"574-9b8416750975496cda93.js","mappings":"qOAgBA,MAAMA,GAAUC,EAAAA,EAAAA,OAAMC,IACpB,MAAM,OACJC,EAAS,GAAE,OACXC,GAAS,EAAK,UACdC,EAAY,IAAG,MACfC,GAAQ,EAAK,aACbC,EAAY,aACZC,EAAY,eACZC,GACEP,EAEEQ,EAAQP,EAAOQ,KAAIC,GAAQC,EAAAA,cAACC,EAAAA,EAAQ,CACxCC,IAAKH,EAAKI,GACVC,SAAUL,EAAKK,SACfC,QAASN,EAAKM,QACdC,KAAMP,EAAKO,KACXf,OAAQA,EACRI,aAAcA,IAAMA,EAAcI,EAAKI,IACvCP,eAAgBA,IAAMA,EAAgBG,EAAKI,QAG7C,OAAOH,EAAAA,cAACO,EAAAA,EAAG,CACTC,MAAM,UACNhB,UAAWA,EACXC,MAAOA,EACPC,aAAcA,GAEdM,EAAAA,cAAA,OAAKS,UAAWC,EAAAA,EAAKC,UAClBd,GAEC,I,yEChCR,MAAMe,GAA2BxB,EAAAA,EAAAA,OAAMC,IACrC,MAAM,QACJwB,EAAO,aACPC,GACEzB,GAEE,cAAE0B,EAAa,aAAEC,IAAiBC,EAAAA,EAAAA,YAAWC,EAAAA,IAE7C,EAACC,EAAa,EAACC,IAAmBC,EAAAA,EAAAA,UAAiBP,EACrDA,EAAaT,QACb,KAEE,EAACiB,EAAa,EAACC,IAAmBF,EAAAA,EAAAA,UACtCP,aAAY,EAAZA,EAAcV,UA2BhB,OACEJ,EAAAA,cAAA,OAAKS,UAAWC,EAAAA,QAAAA,WACdV,EAAAA,cAACwB,EAAAA,EAAgB,CACfC,QAAQ,WACRC,MAAOJ,EACPK,SAAUJ,EACVK,QAAQ,MACRC,MAAM,qBAGR7B,EAAAA,cAAC8B,EAAAA,EAAW,CACVC,YAAY,cACZL,MAAOP,EACPQ,SAAUP,IAGZpB,EAAAA,cAAA,OAAKS,UAAWC,EAAAA,QAAAA,sBACdV,EAAAA,cAACgC,EAAAA,EAAY,CACXC,KAAK,SACLL,QAAQ,UACRM,KAAK,IACLC,MAAM,WACNC,QAASvB,IAEXb,EAAAA,cAACgC,EAAAA,EAAY,CACXC,KAAMnB,EAAe,eAAiB,YACtCc,QAAQ,SACRM,KAAK,IACLC,MAAM,WACNC,QArDOC,KACb,GAAKf,EAAL,CACA,GAAIR,EAWF,OAVAC,EACED,EAAaX,GACb,CACEA,GAAIW,EAAaX,GACjBE,QAASc,EACTf,SAAUkB,EACVhB,KAAM,IAAIgC,YAGdzB,IAGFG,EAAa,CACXb,IAAIoC,EAAAA,EAAAA,KACJlC,QAASc,EACTf,SAAUkB,EACVhB,KAAM,IAAIgC,OAEZzB,GApByB,CAoBhB,KAmCH,IC5EJ2B,GAAoBpD,EAAAA,EAAAA,OAAMC,IAC9B,MAAM,UACJoB,EAAS,OACTgC,EAAM,QACN5B,EAAO,UACP6B,EAAS,SACTC,EAAQ,aACR7B,GACEzB,GAEGuD,EAAgBC,IAAoBC,EAAAA,EAAAA,IAAU,GAErD,OACE9C,MAAA+C,cAACC,EAAAA,EAAK,CACJvC,UAAWA,EACXD,MAAOM,EACHA,EAAaT,QACb,YAEJ4C,UAAU,KACVR,OAAQA,EACR5B,QAASA,EACT6B,UAAWA,EACXC,SAAUA,EACVC,eAAgBA,EAChBC,iBAAkBA,GAElB7C,MAAA+C,cAACnC,EAAwB,CACvBC,QAASgC,EACT/B,aAAcA,IAEV,IC9BNoC,GAA8B9D,EAAAA,EAAAA,OAAMC,IACxC,MAAM,QACJwB,EAAO,aACPC,GACEzB,GAEE,gBAAE8D,IAAoBlC,EAAAA,EAAAA,YAAWC,EAAAA,GAQvC,OACElB,EAAAA,cAAA,OAAKS,UAAWC,EAAAA,QAAAA,WACdV,EAAAA,cAAA,OAAKS,UAAWC,EAAAA,QAAAA,iBAAsB,qEAItCV,EAAAA,cAAA,OAAKS,UAAcC,EAAAA,QAAAA,qBAAyB,IAAIA,EAAAA,QAAAA,mBAC9CV,EAAAA,cAACgC,EAAAA,EAAY,CACXC,KAAK,SACLL,QAAQ,UACRM,KAAK,IACLC,MAAM,WACNC,QAASvB,IAEXb,EAAAA,cAACgC,EAAAA,EAAY,CACXC,KAAK,SACLL,QAAQ,SACRM,KAAK,IACLC,MAAM,WACNC,QAzBOC,KACRvB,IACLqC,EAAgBrC,EAAaX,IAC7BU,IAAS,KAyBH,ICrCJuC,GAAuBhE,EAAAA,EAAAA,OAAMC,IACjC,MAAM,UACJoB,EAAS,OACTgC,EAAM,QACN5B,EAAO,UACP6B,EAAS,SACTC,EAAQ,aACR7B,GACEzB,GAEGuD,EAAgBC,IAAoBC,EAAAA,EAAAA,IAAU,GAErD,OACE9C,MAAA+C,cAACC,EAAAA,EAAK,CACJvC,UAAWA,EACXD,MAAK,+CAAgDM,aAAY,EAAZA,EAAcT,SAAO,IAC1E4C,UAAU,KACVR,OAAQA,EACR5B,QAASA,EACT6B,UAAWA,EACXC,SAAUA,EACVC,eAAgBA,EAChBC,iBAAkBA,GAElB7C,MAAA+C,cAACG,EAA2B,CAC1BrC,QAASgC,EACT/B,aAAcA,IAEV,IC7BNuC,GAAUjE,EAAAA,EAAAA,OAAK,KACnB,MACEkE,MAAM,OACJ/D,EAAM,OACND,KAEA2B,EAAAA,EAAAA,YAAWC,EAAAA,IAET,EAAEqC,EAAU,EAACC,IAAiBnC,EAAAA,EAAAA,WAAkB,IAChD,EAAEoC,EAAa,EAACC,IAAoBrC,EAAAA,EAAAA,WAAkB,IACtD,EAAEP,EAAa,EAAC6C,IAAoBtC,EAAAA,EAAAA,eAAiCuC,GASrEC,EAAsBA,KAC1BF,OAAgBC,GAChBJ,GAAa,EAAM,EAUfM,EAAwBA,KAC5BH,OAAgBC,GAChBF,GAAgB,EAAM,EAGxB,OACE1D,MAAA+C,cAAA,OAAKtC,UAAWC,EAAAA,QAAAA,aACdV,MAAA+C,cAAA,OAAKtC,UAAWC,EAAAA,QAAAA,kBACdV,MAAA+C,cAAC5D,EAAO,CACNG,OAAQA,EACRC,OAAQA,EACRC,UAAU,IACVE,aAAcH,GAAUS,MAAA+C,cAACf,EAAAA,EAAY,CACnCC,KAAK,YACLL,QAAQ,SACRM,KAAK,IACLC,MAAM,UACNC,QAASA,IAAMoB,GAAa,KAE9B7D,aAtCmBQ,IACzB,MAAM4D,EAAczE,EAAO0E,MAAKjE,GAAQA,EAAKI,KAAOA,IAChD4D,IACFJ,EAAgBI,GAChBP,GAAa,GACf,EAkCM5D,eA3BqBO,IAC3B,MAAM4D,EAAczE,EAAO0E,MAAKjE,GAAQA,EAAKI,KAAOA,IAChD4D,IACFJ,EAAgBI,GAChBL,GAAgB,GAClB,KA0BE1D,MAAA+C,cAACP,EAAiB,CAChBC,OAAQc,EACR1C,QAASgD,EACTnB,UAAWmB,EACXlB,SAAUkB,EACV/C,aAAcA,IAEhBd,MAAA+C,cAACK,EAAoB,CACnBX,OAAQgB,EACR5C,QAASiD,EACTpB,UAAWoB,EACXnB,SAAUmB,EACVhD,aAAcA,IAEZ,I,oDClEV,MAAMmD,GAA0B7E,EAAAA,EAAAA,OAAMC,GAElCW,MAAA+C,cAACmB,EAAAA,EAAgB,KACflE,MAAA+C,cAACoB,EAA6B9E,GAAS,OAKvC8E,GAA2B/E,EAAAA,EAAAA,OAAMC,IACrC,MAAQiE,MAAM,UAAEc,GAAW,QAAEC,IAAYpD,EAAAA,EAAAA,YAAWC,EAAAA,GAE9CoD,GAAWC,EAAAA,EAAAA,MAUjB,OARAC,EAAAA,EAAAA,YAAU,KACRH,GAAWA,EAAQhF,EAAM,GACxB,CAACA,IAEC+E,GACHE,EAASG,EAAAA,EAAUC,WAGd1E,MAAA+C,cAAA,QAAMtC,UAAWkE,EAAAA,QAAAA,MACtB3E,MAAA+C,cAAC6B,EAAAA,EAAM,MACP5E,MAAA+C,cAACM,EAAO,MACRrD,MAAA+C,cAAC8B,EAAAA,EAAM,MACP7E,MAAA+C,cAAC+B,EAAAA,EAAU,MACN,I,cC3BT,MAR4BC,IAExB/E,MAAA+C,cAACkB,EACKe,EAAAA,S","sources":["webpack://webia_front/./src/templatesReact/miniSiteCommon/Gallery.tsx","webpack://webia_front/./src/templatesReact/miniSiteGalleryTemplate/AddPhotoItemModalContent.tsx","webpack://webia_front/./src/templatesReact/miniSiteGalleryTemplate/AddPhotoItemModal.tsx","webpack://webia_front/./src/templatesReact/miniSiteGalleryTemplate/RemovePhotoItemModalContent.tsx","webpack://webia_front/./src/templatesReact/miniSiteGalleryTemplate/RemovePhotoItemModal.tsx","webpack://webia_front/./src/templatesReact/miniSiteGalleryTemplate/Content.tsx","webpack://webia_front/./src/templatesReact/miniSiteGalleryTemplate/MiniSiteGalleryTemplate.tsx","webpack://webia_front/./src/pagesReact/miniSiteGalleryPage/MiniSiteGalleryPage.tsx"],"sourcesContent":["import mscs from './styleCommon/styleProvider';\nimport React, { memo, ReactNode } from 'react';\nimport { Box } from './box/Box';\nimport { CardItem } from './cardItem/CardItem';\nimport { PhotoItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = {\n  photos: PhotoItemT[]\n  isEdit?: boolean;\n  titleSize?: 'm' | 'l';\n  isBox?: boolean;\n  childrenMore?: ReactNode;\n  editCallback?: (uuid: string) => void;\n  removeCallback?: (uuid: string) => void;\n}\n\nconst Gallery = memo((props: PropsT) => {\n  const {\n    photos = [],\n    isEdit = false,\n    titleSize = 'm',\n    isBox = false,\n    childrenMore,\n    editCallback,\n    removeCallback,\n  } = props;\n\n  const items = photos.map(item => <CardItem\n    key={item.id}\n    imageUrl={item.imageUrl}\n    comment={item.comment}\n    date={item.date}\n    isEdit={isEdit}\n    editCallback={() => editCallback!(item.id)}\n    removeCallback={() => removeCallback!(item.id)}\n  />);\n\n  return <Box\n    title='Gallery'\n    titleSize={titleSize}\n    isBox={isBox}\n    childrenMore={childrenMore}\n  >\n    <div className={mscs.gridList}>\n      {items}\n    </div>\n  </Box>;\n\n});\n\nexport { Gallery };","import mscs from '../miniSiteCommon/styleCommon/style.module.scss';\nimport React, { memo, useContext, useState } from 'react';\nimport { CustomButton } from 'components/CustomButton/CustomButton';\nimport { MiniSiteContext } from 'templatesReact/miniSiteCommon/Context';\nimport { CustomInput } from 'components/CustomInput/CustomInput';\nimport { CustomSelectFile } from 'components/CustomInput/CustomSelectFile';\nimport { generateUUID } from 'utils/utils';\nimport { PhotoItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = {\n  onClose: () => void\n  selectedItem?: PhotoItemT\n}\n\nconst AddPhotoItemModalContent = memo((props: PropsT) => {\n  const {\n    onClose,\n    selectedItem,\n  } = props;\n\n  const { editPhotoItem, addPhotoItem } = useContext(MiniSiteContext);\n\n  const [currentLabel, setCurrentLabel] = useState<string>(selectedItem\n    ? selectedItem.comment!\n    : ''\n  );\n  const [currentImage, setCurrentImage] = useState<string | undefined>(\n    selectedItem?.imageUrl\n  );\n\n  const submit = () => {\n    if (!currentImage) return;\n    if (selectedItem) {\n      editPhotoItem(\n        selectedItem.id,\n        {\n          id: selectedItem.id,\n          comment: currentLabel,\n          imageUrl: currentImage,\n          date: new Date(),\n        }\n      );\n      onClose();\n      return;\n    }\n    addPhotoItem({\n      id: generateUUID(),\n      comment: currentLabel,\n      imageUrl: currentImage,\n      date: new Date(),\n    });\n    onClose();\n  };\n\n  return (\n    <div className={mscs.modalBody}>\n      <CustomSelectFile\n        htmlFor=\"newPhoto\"\n        value={currentImage}\n        onChange={setCurrentImage}\n        variant='box'\n        label='Upload new photo'\n      />\n\n      <CustomInput\n        placeholder='Add comment'\n        value={currentLabel}\n        onChange={setCurrentLabel}\n      />\n\n      <div className={mscs.modalButtonContainer}>\n        <CustomButton\n          text=\"Cancel\"\n          variant='outline'\n          size='l'\n          width='standard'\n          onClick={onClose}\n        />\n        <CustomButton\n          text={selectedItem ? 'Save changes' : 'Add photo'}\n          variant='action'\n          size='l'\n          width='standard'\n          onClick={submit}\n        />\n      </div>\n    </div>\n  );\n});\n\nexport { AddPhotoItemModalContent };\n","import { Modal, ModalPublicProps } from 'components/modal/Modal';\nimport { useToggle } from 'hooks/useToggle';\nimport { AddPhotoItemModalContent } from './AddPhotoItemModalContent';\nimport { memo } from 'react';\nimport { PhotoItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = ModalPublicProps & {\n  selectedItem?: PhotoItemT;\n}\n\nconst AddPhotoItemModal = memo((props: PropsT) => {\n  const {\n    className,\n    isOpen,\n    onClose,\n    onOverlay,\n    onEscape,\n    selectedItem,\n  } = props;\n\n  const [triggerClosing, onTriggerClosing] = useToggle(false);\n\n  return (\n    <Modal\n      className={className}\n      title={selectedItem\n        ? selectedItem.comment\n        : 'New photo'\n      }\n      widthSize='xl'\n      isOpen={isOpen}\n      onClose={onClose}\n      onOverlay={onOverlay}\n      onEscape={onEscape}\n      triggerClosing={triggerClosing}\n      onTriggerClosing={onTriggerClosing}\n    >\n      <AddPhotoItemModalContent\n        onClose={onTriggerClosing}\n        selectedItem={selectedItem}\n      />\n    </Modal>\n  );\n});\n\nexport { AddPhotoItemModal };\n","import mscs from '../miniSiteCommon/styleCommon/style.module.scss';\nimport React, { memo, useContext } from 'react';\nimport { CustomButton } from 'components/CustomButton/CustomButton';\nimport { MiniSiteContext } from 'templatesReact/miniSiteCommon/Context';\nimport { PhotoItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = {\n  onClose: () => void\n  selectedItem?: PhotoItemT\n}\n\nconst RemovePhotoItemModalContent = memo((props: PropsT) => {\n  const {\n    onClose,\n    selectedItem,\n  } = props;\n\n  const { removePhotoItem } = useContext(MiniSiteContext);\n\n  const submit = () => {\n    if (!selectedItem) return;\n    removePhotoItem(selectedItem.id);\n    onClose();\n  };\n\n  return (\n    <div className={mscs.modalBody}>\n      <div className={mscs.modalRemoveText}>\n        It will be deleted permanently. But you can always add a new one.\n      </div>\n\n      <div className={`${mscs.modalButtonContainer} ${mscs.modalButtonCenter}`}>\n        <CustomButton\n          text=\"Cancel\"\n          variant='outline'\n          size='l'\n          width='standard'\n          onClick={onClose}\n        />\n        <CustomButton\n          text=\"Remove\"\n          variant='action'\n          size='l'\n          width='standard'\n          onClick={submit}\n        />\n      </div>\n    </div>\n  );\n});\n\nexport { RemovePhotoItemModalContent };\n","import { Modal, ModalPublicProps } from 'components/modal/Modal';\nimport { useToggle } from 'hooks/useToggle';\nimport { memo } from 'react';\nimport { RemovePhotoItemModalContent } from './RemovePhotoItemModalContent';\nimport { PhotoItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = ModalPublicProps & {\n  selectedItem?: PhotoItemT;\n}\n\nconst RemovePhotoItemModal = memo((props: PropsT) => {\n  const {\n    className,\n    isOpen,\n    onClose,\n    onOverlay,\n    onEscape,\n    selectedItem,\n  } = props;\n\n  const [triggerClosing, onTriggerClosing] = useToggle(false);\n\n  return (\n    <Modal\n      className={className}\n      title={`Are you sure that you want to delete photo ${selectedItem?.comment}?`}\n      widthSize='xs'\n      isOpen={isOpen}\n      onClose={onClose}\n      onOverlay={onOverlay}\n      onEscape={onEscape}\n      triggerClosing={triggerClosing}\n      onTriggerClosing={onTriggerClosing}\n    >\n      <RemovePhotoItemModalContent\n        onClose={onTriggerClosing}\n        selectedItem={selectedItem}\n      />\n    </Modal>\n  );\n});\n\nexport { RemovePhotoItemModal };\n","import mscs from '../miniSiteCommon/styleCommon/style.module.scss';\nimport { memo, useContext, useState } from 'react';\nimport { Gallery } from '../miniSiteCommon/Gallery';\nimport { MiniSiteContext } from '../miniSiteCommon/Context';\nimport { CustomButton } from 'components/CustomButton/CustomButton';\nimport { AddPhotoItemModal } from './AddPhotoItemModal';\nimport { RemovePhotoItemModal } from './RemovePhotoItemModal';\nimport { PhotoItemT } from '../miniSiteCommon/types';\n\nconst Content = memo(() => {\n  const {\n    data: {\n      isEdit,\n      photos,\n    },\n  } = useContext(MiniSiteContext);\n\n  const [ isOpenAdd, setIsOpenAdd ] = useState<boolean>(false);\n  const [ isOpenRemove, setIsOpenRemove ] = useState<boolean>(false);\n  const [ selectedItem, setSelectedItem ] = useState<PhotoItemT | undefined>(undefined);\n\n  const selectItemForEdit = (id: string) => {\n    const foundedItem = photos.find(item => item.id === id);\n    if (foundedItem) {\n      setSelectedItem(foundedItem);\n      setIsOpenAdd(true);\n    }\n  };\n  const unselectItemForEdit = () => {\n    setSelectedItem(undefined);\n    setIsOpenAdd(false);\n  };\n\n  const selectItemForRemove = (id: string) => {\n    const foundedItem = photos.find(item => item.id === id);\n    if (foundedItem) {\n      setSelectedItem(foundedItem);\n      setIsOpenRemove(true);\n    }\n  };\n  const unselectItemForRemove = () => {\n    setSelectedItem(undefined);\n    setIsOpenRemove(false);\n  };\n\n  return (\n    <div className={mscs.contentBody}>\n      <div className={mscs.contentContainer}>\n        <Gallery\n          photos={photos}\n          isEdit={isEdit}\n          titleSize='l'\n          childrenMore={isEdit && <CustomButton\n            text=\"Add photo\"\n            variant='action'\n            size='l'\n            width='content'\n            onClick={() => setIsOpenAdd(true)}\n          />}\n          editCallback={selectItemForEdit}\n          removeCallback={selectItemForRemove}\n        />\n      </div>\n\n      <AddPhotoItemModal\n        isOpen={isOpenAdd}\n        onClose={unselectItemForEdit}\n        onOverlay={unselectItemForEdit}\n        onEscape={unselectItemForEdit}\n        selectedItem={selectedItem}\n      />\n      <RemovePhotoItemModal\n        isOpen={isOpenRemove}\n        onClose={unselectItemForRemove}\n        onOverlay={unselectItemForRemove}\n        onEscape={unselectItemForRemove}\n        selectedItem={selectedItem}\n      />\n    </div>\n  );\n});\n\nexport { Content };","import mst from '../miniSiteCommon/styleTemplate/style.module.scss';\nimport { Header } from '../miniSiteCommon/header';\nimport { Content } from './Content';\nimport { Footer } from '../miniSiteCommon/footer';\nimport { PostFooter } from '../miniSiteCommon/postfooter';\nimport { memo, useContext, useEffect } from 'react';\nimport { MiniSiteDataT } from 'templatesReact/miniSiteCommon/types';\nimport { MiniSiteContext } from 'templatesReact/miniSiteCommon/Context';\nimport MiniSiteProvider from 'templatesReact/miniSiteCommon/Provider';\nimport { useNavigate } from 'react-router-dom';\nimport { AppRoutes } from 'pagesReact';\n\nconst MiniSiteGalleryTemplate = memo((props: MiniSiteDataT) => {\n  return (\n    <MiniSiteProvider>\n      <_MiniSiteGalleryTemplate {...props} />.\n    </MiniSiteProvider>\n  );\n});\n\nconst _MiniSiteGalleryTemplate = memo((props: MiniSiteDataT) => {\n  const { data: { isPremium }, setData } = useContext(MiniSiteContext);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    setData && setData(props);\n  }, [props]);\n\n  if (!isPremium) {\n    navigate(AppRoutes.MINI_SITE);\n  }\n\n  return <main className={mst.body}>\n    <Header />\n    <Content />\n    <Footer />\n    <PostFooter />\n  </main>;\n});\n\nexport { MiniSiteGalleryTemplate };\n","import { MiniSiteGalleryTemplate } from 'templatesReact/miniSiteGalleryTemplate';\nimport { dataMini } from 'pagesReact/miniSitePage/MiniSitePage';\n\nconst MiniSiteGalleryPage = () => {\n  return (\n    <MiniSiteGalleryTemplate\n      {...dataMini}\n    />\n  );\n};\n\nexport default MiniSiteGalleryPage;\n"],"names":["Gallery","memo","props","photos","isEdit","titleSize","isBox","childrenMore","editCallback","removeCallback","items","map","item","React","CardItem","key","id","imageUrl","comment","date","Box","title","className","mscs","gridList","AddPhotoItemModalContent","onClose","selectedItem","editPhotoItem","addPhotoItem","useContext","MiniSiteContext","currentLabel","setCurrentLabel","useState","currentImage","setCurrentImage","CustomSelectFile","htmlFor","value","onChange","variant","label","CustomInput","placeholder","CustomButton","text","size","width","onClick","submit","Date","generateUUID","AddPhotoItemModal","isOpen","onOverlay","onEscape","triggerClosing","onTriggerClosing","useToggle","createElement","Modal","widthSize","RemovePhotoItemModalContent","removePhotoItem","RemovePhotoItemModal","Content","data","isOpenAdd","setIsOpenAdd","isOpenRemove","setIsOpenRemove","setSelectedItem","undefined","unselectItemForEdit","unselectItemForRemove","foundedItem","find","MiniSiteGalleryTemplate","MiniSiteProvider","_MiniSiteGalleryTemplate","isPremium","setData","navigate","useNavigate","useEffect","AppRoutes","MINI_SITE","mst","Header","Footer","PostFooter","MiniSiteGalleryPage","dataMini"],"sourceRoot":""}