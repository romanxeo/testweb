{"version":3,"file":"component---src-pages-gatsby-signup-tsx-ad4c070c95c55ba9db11.js","mappings":"uIAyDA,IAxCA,SAAaA,GAAmB,IAADC,EAAAC,EAC7B,MAAM,YACJC,EAAW,MACXC,EAAK,SACLC,GACEL,GAEE,KAAEM,IAASC,EAAAA,EAAAA,gBAAe,YAc1BC,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAgC,QAApBT,EAAGK,EAAKG,oBAAY,IAAAR,OAAA,EAAjBA,EAAmBG,MAExC,OACEO,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQD,EAAkBN,EAAK,MAAMM,EAAiBN,GACtDO,EAAAA,cAAA,QAAMC,KAAK,cAAcC,QAASL,IAClCG,EAAAA,cAAA,QAAMG,SAAS,WAAWD,QAAST,IACnCO,EAAAA,cAAA,QAAMG,SAAS,iBAAiBD,QAASL,IACzCG,EAAAA,cAAA,QAAMG,SAAS,UAAUD,QAAQ,YACjCF,EAAAA,cAAA,QAAMC,KAAK,eAAeC,QAAQ,YAClCF,EAAAA,cAAA,QAAMC,KAAK,kBAAkBC,SAA0B,QAAjBX,EAAAI,EAAKG,oBAAY,IAAAP,OAAA,EAAjBA,EAAmBa,SAAU,KACnEJ,EAAAA,cAAA,QAAMC,KAAK,gBAAgBC,QAAST,IACpCO,EAAAA,cAAA,QAAMC,KAAK,sBAAsBC,QAASL,IACzCH,EAGP,C,mGC5CA,MAuCaW,EAA0BA,IAAML,EAAAA,cAACM,EAAAA,EAAG,CAACb,MAAM,uBAExD,UAzCwDc,IAGjD,IAHkD,KACvDC,EAAI,SACJC,GACDF,EAEC,MAAM,EAACG,EAAI,EAACC,IAAUC,EAAAA,EAAAA,UAAS,GAE/B,OACEZ,EAAAA,cAAA,WACEA,EAAAA,cAAA,UAAI,0BACqBA,EAAAA,cAAA,KAAGa,MAAO,CAAEC,MAAO,QAAS,yBACnDd,EAAAA,cAAA,UAAQe,QAASA,IAAMJ,EAAOD,EAAI,IAAI,aAAWA,IAEnDV,EAAAA,cAAA,SAAG,4CACwCA,EAAAA,cAAA,YAAM,YAAe,0CAClCA,EAAAA,cAAA,YAAM,YAAe,qCACzCA,EAAAA,cAAA,YAAM,oBAAuB,MAEvCA,EAAAA,cAAA,SAAG,2CACuCA,EAAAA,cAAA,YAAM,cAAiB,oBACvDA,EAAAA,cAAA,YAAM,cAAiB,gBAAaA,EAAAA,cAAA,YAAM,YAAe,UAEnEA,EAAAA,cAAA,SAAG,+BAC2BA,EAAAA,cAAA,YAAOS,EAASO,UAAgB,uBAClDR,EAAKb,KAAKsB,UAAU,KAEhCjB,EAAAA,cAAA,SAAG,kCAC+B,IAChCA,EAAAA,cAAA,KAAGkB,KAAK,yEAAwE,kCAE5E,KAGNlB,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACbpB,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAG,UAAS,wBAClBpB,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAG,WAAU,yBACf,C","sources":["webpack://webia_front/./src/gatsby/seo.tsx","webpack://webia_front/./src/pagesGatsby/signup.tsx"],"sourcesContent":["/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { ReactNode } from 'react';\n\ntype PropsType = {\n  description?: string\n  title?: string\n  children?: ReactNode\n}\n\nfunction Seo(props: PropsType) {\n  const {\n    description,\n    title,\n    children,\n  } = props;\n\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ''} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  );\n}\n\nexport default Seo;\n","import React, { useState } from 'react';\nimport { PageProps, Link, graphql, HeadFC } from 'gatsby';\n// import Layout from \"../components/layout\"\nimport Seo from '../gatsby/seo';\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  location,\n}) => {\n\n  const [inc, setInc] = useState(0);\n\n  return(\n    <div>\n      <h1>\n        SIGNUP Gatsby supports <b style={{ color: 'red' }}>TypeScript by default</b>\n        <button onClick={() => setInc(inc+1)}>inc 312 - {inc}</button>\n      </h1>\n      <p>\n        This means that you can create and write <code>.ts/.tsx</code> files for\n        your pages, components, and <code>gatsby-*</code> configuration files (for\n        example <code>gatsby-config.ts</code>).\n      </p>\n      <p>\n        For type checking youll want to install <code>typescript</code> via npm\n        and run <code>tsc --init</code> to create a <code>tsconfig</code> file.\n      </p>\n      <p>\n        Youre currently on the page <code>{location.pathname}</code> which was\n        built on {data.site.buildTime}.\n      </p>\n      <p>\n        To learn more, head over to our{' '}\n        <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n          documentation about TypeScript\n        </a>\n        .\n      </p>\n      <Link to=\"/\">Go back to the homepage</Link>\n      <Link to=\"/login\">Go back to the login</Link>\n      <Link to=\"/signup\">Go back to the signup</Link>\n    </div>\n  );};\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript 1\" />;\n\nexport default UsingTypescript;\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`;\n"],"names":["props","_site$siteMetadata","_site$siteMetadata2","description","title","children","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","React","name","content","property","author","Head","Seo","_ref","data","location","inc","setInc","useState","style","color","onClick","pathname","buildTime","href","Link","to"],"sourceRoot":""}