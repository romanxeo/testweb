{"version":3,"file":"489-0b98e7869be3d4f9e170.js","mappings":"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","sources":["webpack://webia_front/./src/templatesReact/miniSiteCommon/Shop.tsx","webpack://webia_front/./src/templatesReact/miniSiteShopTemplate/AddProductItemModalContent.tsx","webpack://webia_front/./src/templatesReact/miniSiteShopTemplate/AddProductItemModal.tsx","webpack://webia_front/./src/templatesReact/miniSiteShopTemplate/RemoveProductItemModalContent.tsx","webpack://webia_front/./src/templatesReact/miniSiteShopTemplate/RemoveProductItemModal.tsx","webpack://webia_front/./src/templatesReact/miniSiteShopTemplate/Content.tsx","webpack://webia_front/./src/templatesReact/miniSiteShopTemplate/MiniSiteShopTemplate.tsx","webpack://webia_front/./src/pagesReact/miniSiteShopPage/MiniSiteShopPage.tsx"],"sourcesContent":["import mscs from './styleCommon/styleProvider';\nimport React, { memo, ReactNode } from 'react';\nimport { Box } from './box/Box';\nimport { CardItem } from './cardItem/CardItem';\nimport { ProductItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = {\n  products?: ProductItemT[]\n  isEdit?: boolean\n  titleSize?: 'm' | 'l'\n  isBox?: boolean\n  childrenMore?: ReactNode;\n  editCallback?: (uuid: string) => void;\n  removeCallback?: (uuid: string) => void;\n}\n\nconst Shop = memo((props: PropsT) => {\n  const {\n    products = [],\n    isEdit = false,\n    titleSize = 'm',\n    isBox = false,\n    childrenMore,\n    editCallback,\n    removeCallback,\n  } = props;\n\n  const items = products.map(item => <CardItem\n    key={item.id}\n    imageUrl={item.imageUrl}\n    name={item.name}\n    description={item.description}\n    price={`â‚¬${item.price!.toFixed(2)}`}\n    isEdit={isEdit}\n    editCallback={() => editCallback!(item.id!)}\n    removeCallback={() => removeCallback!(item.id!)}\n  />);\n\n  return <Box\n    title='Shop'\n    titleSize={titleSize}\n    isBox={isBox}\n    childrenMore={childrenMore}\n  >\n    <div className={mscs.gridList}>\n      {items}\n    </div>\n  </Box>;\n});\n\nexport { Shop };\n","import mscs from '../miniSiteCommon/styleCommon/style.module.scss';\nimport React, { memo, useContext, useState } from 'react';\nimport { CustomButton } from 'components/CustomButton/CustomButton';\nimport { MiniSiteContext } from 'templatesReact/miniSiteCommon/Context';\nimport { CustomInput } from 'components/CustomInput/CustomInput';\nimport { CustomSelectFile } from 'components/CustomInput/CustomSelectFile';\nimport { generateUUID } from 'utils/utils';\nimport { ProductItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = {\n  onClose: () => void\n  selectedItem?: ProductItemT\n}\n\nconst AddProductItemModalContent = memo((props: PropsT) => {\n  const {\n    onClose,\n    selectedItem,\n  } = props;\n\n  const { addProductItem, editProductItem } = useContext(MiniSiteContext);\n\n  const [currentName, setCurrentName] = useState<string>(selectedItem\n    ? selectedItem.name\n    : ''\n  );\n  const [currentDescription, setCurrentDescription] = useState<string>(selectedItem\n    ? selectedItem.description\n    : ''\n  );\n  const [currentPrice, setCurrentPrice] = useState<string>(selectedItem\n    ? String(selectedItem.price)\n    : ''\n  );\n  const [currentImage, setCurrentImage] = useState<string | undefined>(\n    selectedItem?.imageUrl\n  );\n\n  const submit = () => {\n    if (!currentImage) return;\n    if (selectedItem) {\n      editProductItem(\n        selectedItem.id,\n        {\n          id: selectedItem.id,\n          name: currentName,\n          description: currentDescription,\n          price: +currentPrice || 0,\n          imageUrl: currentImage,\n        }\n      );\n      onClose();\n      return;\n    }\n    addProductItem({\n      id: generateUUID(),\n      name: currentName,\n      description: currentDescription,\n      price: +currentPrice || 0,\n      imageUrl: currentImage,\n    });\n    onClose();\n  };\n\n  return (\n    <div className={mscs.modalBody}>\n      <CustomSelectFile\n        htmlFor=\"newProduct\"\n        value={currentImage}\n        onChange={setCurrentImage}\n        variant='box'\n        label='Upload product image'\n      />\n\n      <CustomInput\n        placeholder='Product name'\n        value={currentName}\n        onChange={setCurrentName}\n      />\n\n      <CustomInput\n        placeholder='Product description'\n        value={currentDescription}\n        onChange={setCurrentDescription}\n      />\n\n      <CustomInput\n        placeholder='Product price'\n        type='number'\n        value={currentPrice}\n        onChange={setCurrentPrice}\n      />\n\n      <div className={mscs.modalButtonContainer}>\n        <CustomButton\n          text=\"Cancel\"\n          variant='outline'\n          size='l'\n          width='standard'\n          onClick={onClose}\n        />\n        <CustomButton\n          text={selectedItem ? 'Save changes' : 'Add product'}\n          variant='action'\n          size='l'\n          width='standard'\n          onClick={submit}\n        />\n      </div>\n    </div>\n  );\n});\n\nexport { AddProductItemModalContent };\n","import { Modal, ModalPublicProps } from 'components/modal/Modal';\nimport { useToggle } from 'hooks/useToggle';\nimport { AddProductItemModalContent } from './AddProductItemModalContent';\nimport { memo } from 'react';\nimport { ProductItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = ModalPublicProps & {\n  selectedItem?: ProductItemT;\n}\n\nconst AddProductItemModal = memo((props: PropsT) => {\n  const {\n    className,\n    isOpen,\n    onClose,\n    onOverlay,\n    onEscape,\n    selectedItem,\n  } = props;\n\n  const [triggerClosing, onTriggerClosing] = useToggle(false);\n\n  return (\n    <Modal\n      className={className}\n      title={selectedItem\n        ? selectedItem.name!\n        : 'New product'\n      }\n      widthSize='xl'\n      isOpen={isOpen}\n      onClose={onClose}\n      onOverlay={onOverlay}\n      onEscape={onEscape}\n      triggerClosing={triggerClosing}\n      onTriggerClosing={onTriggerClosing}\n    >\n      <AddProductItemModalContent\n        onClose={onTriggerClosing}\n        selectedItem={selectedItem}\n      />\n    </Modal>\n  );\n});\n\nexport { AddProductItemModal };\n","import mscs from '../miniSiteCommon/styleCommon/style.module.scss';\nimport React, { memo, useContext } from 'react';\nimport { CustomButton } from 'components/CustomButton/CustomButton';\nimport { MiniSiteContext } from 'templatesReact/miniSiteCommon/Context';\nimport { ProductItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = {\n  onClose: () => void\n  selectedItem?: ProductItemT\n}\n\nconst RemoveProductItemModalContent = memo((props: PropsT) => {\n  const {\n    onClose,\n    selectedItem,\n  } = props;\n\n  const { removeProductItem } = useContext(MiniSiteContext);\n\n  const submit = () => {\n    if (!selectedItem) return;\n    removeProductItem(selectedItem.id);\n    onClose();\n  };\n\n  return (\n    <div className={mscs.modalBody}>\n      <div className={mscs.modalRemoveText}>\n        It will be deleted permanently. But you can always add a new one.\n      </div>\n\n      <div className={`${mscs.modalButtonContainer} ${mscs.modalButtonCenter}`}>\n        <CustomButton\n          text=\"Cancel\"\n          variant='outline'\n          size='l'\n          width='standard'\n          onClick={onClose}\n        />\n        <CustomButton\n          text=\"Remove\"\n          variant='action'\n          size='l'\n          width='standard'\n          onClick={submit}\n        />\n      </div>\n    </div>\n  );\n});\n\nexport { RemoveProductItemModalContent };\n","import { Modal, ModalPublicProps } from 'components/modal/Modal';\nimport { useToggle } from 'hooks/useToggle';\nimport { memo } from 'react';\nimport { RemoveProductItemModalContent } from './RemoveProductItemModalContent';\nimport { ProductItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = ModalPublicProps & {\n  selectedItem?: ProductItemT;\n}\n\nconst RemoveProductItemModal = memo((props: PropsT) => {\n  const {\n    className,\n    isOpen,\n    onClose,\n    onOverlay,\n    onEscape,\n    selectedItem,\n  } = props;\n\n  const [triggerClosing, onTriggerClosing] = useToggle(false);\n\n  return (\n    <Modal\n      className={className}\n      title={`Are you sure that you want to delete product ${selectedItem?.name}?`}\n      widthSize='xs'\n      isOpen={isOpen}\n      onClose={onClose}\n      onOverlay={onOverlay}\n      onEscape={onEscape}\n      triggerClosing={triggerClosing}\n      onTriggerClosing={onTriggerClosing}\n    >\n      <RemoveProductItemModalContent\n        onClose={onTriggerClosing}\n        selectedItem={selectedItem}\n      />\n    </Modal>\n  );\n});\n\nexport { RemoveProductItemModal };\n","import mscs from '../miniSiteCommon/styleCommon/style.module.scss';\nimport { memo, useContext, useState } from 'react';\nimport { Shop } from '../miniSiteCommon/Shop';\nimport { MiniSiteContext } from '../miniSiteCommon/Context';\nimport { CustomButton } from 'components/CustomButton/CustomButton';\nimport { AddProductItemModal } from './AddProductItemModal';\nimport { RemoveProductItemModal } from './RemoveProductItemModal';\nimport { ProductItemT } from '../miniSiteCommon/types';\n\nconst Content = memo(() => {\n  const {\n    data: {\n      isEdit,\n      products,\n    },\n  } = useContext(MiniSiteContext);\n\n  const [ isOpenAdd, setIsOpenAdd ] = useState<boolean>(false);\n  const [ isOpenRemove, setIsOpenRemove ] = useState<boolean>(false);\n  const [ selectedItem, setSelectedItem ] = useState<ProductItemT | undefined>(undefined);\n\n  const selectItemForEdit = (id: string) => {\n    const foundedItem = products.find(item => item.id === id);\n    if (foundedItem) {\n      setSelectedItem(foundedItem);\n      setIsOpenAdd(true);\n    }\n  };\n  const unselectItemForEdit = () => {\n    setSelectedItem(undefined);\n    setIsOpenAdd(false);\n  };\n\n  const selectItemForRemove = (id: string) => {\n    const foundedItem = products.find(item => item.id === id);\n    if (foundedItem) {\n      setSelectedItem(foundedItem);\n      setIsOpenRemove(true);\n    }\n  };\n  const unselectItemForRemove = () => {\n    setSelectedItem(undefined);\n    setIsOpenRemove(false);\n  };\n\n  return (\n    <div className={mscs.contentBody}>\n      <div className={mscs.contentContainer}>\n        <Shop\n          products={products}\n          isEdit={isEdit}\n          titleSize='l'\n          childrenMore={isEdit && <CustomButton\n            text=\"Add product\"\n            variant='action'\n            size='l'\n            width='content'\n            onClick={() => setIsOpenAdd(true)}\n          />}\n          editCallback={selectItemForEdit}\n          removeCallback={selectItemForRemove}\n        />\n      </div>\n\n      <AddProductItemModal\n        isOpen={isOpenAdd}\n        onClose={unselectItemForEdit}\n        onOverlay={unselectItemForEdit}\n        onEscape={unselectItemForEdit}\n        selectedItem={selectedItem}\n      />\n      <RemoveProductItemModal\n        isOpen={isOpenRemove}\n        onClose={unselectItemForRemove}\n        onOverlay={unselectItemForRemove}\n        onEscape={unselectItemForRemove}\n        selectedItem={selectedItem}\n      />\n    </div>\n  );\n});\n\nexport { Content };\n","import mst from '../miniSiteCommon/styleTemplate/style.module.scss';\nimport { Header } from '../miniSiteCommon/header';\nimport { Content } from './Content';\nimport { Footer } from '../miniSiteCommon/footer';\nimport { PostFooter } from '../miniSiteCommon/postfooter';\nimport { memo, useContext, useEffect } from 'react';\nimport { MiniSiteDataT } from 'templatesReact/miniSiteCommon/types';\nimport MiniSiteProvider from 'templatesReact/miniSiteCommon/Provider';\nimport { MiniSiteContext } from 'templatesReact/miniSiteCommon/Context';\nimport { useNavigate } from 'react-router-dom';\nimport { AppRoutes } from 'pagesReact';\n\nconst MiniSiteShopTemplate = memo((props: MiniSiteDataT) => {\n  return (\n    <MiniSiteProvider>\n      <_MiniSiteShopTemplate {...props} />.\n    </MiniSiteProvider>\n  );\n});\n\nconst _MiniSiteShopTemplate = memo((props: MiniSiteDataT) => {\n  const { data: { isPremium }, setData } = useContext(MiniSiteContext);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    setData && setData(props);\n  }, [props]);\n\n  if (!isPremium) {\n    navigate(AppRoutes.MINI_SITE);\n  }\n\n  return <main className={mst.body}>\n    <Header />\n    <Content />\n    <Footer />\n    <PostFooter />\n  </main>;\n});\n\nexport { MiniSiteShopTemplate };\n","import { MiniSiteShopTemplate } from 'templatesReact/miniSiteShopTemplate';\nimport { dataMini } from 'pagesReact/miniSitePage/MiniSitePage';\n\nconst MiniSiteShopPage = () => {\n  return (\n    <MiniSiteShopTemplate\n      {...dataMini}\n    />\n  );\n};\n\nexport default MiniSiteShopPage;\n"],"names":["Shop","memo","props","products","isEdit","titleSize","isBox","childrenMore","editCallback","removeCallback","items","map","item","React","CardItem","key","id","imageUrl","name","description","price","toFixed","Box","title","className","mscs","gridList","AddProductItemModalContent","onClose","selectedItem","addProductItem","editProductItem","useContext","MiniSiteContext","currentName","setCurrentName","useState","currentDescription","setCurrentDescription","currentPrice","setCurrentPrice","String","currentImage","setCurrentImage","CustomSelectFile","htmlFor","value","onChange","variant","label","CustomInput","placeholder","type","CustomButton","text","size","width","onClick","submit","generateUUID","AddProductItemModal","isOpen","onOverlay","onEscape","triggerClosing","onTriggerClosing","useToggle","createElement","Modal","widthSize","RemoveProductItemModalContent","removeProductItem","RemoveProductItemModal","Content","data","isOpenAdd","setIsOpenAdd","isOpenRemove","setIsOpenRemove","setSelectedItem","undefined","unselectItemForEdit","unselectItemForRemove","foundedItem","find","MiniSiteShopTemplate","MiniSiteProvider","_MiniSiteShopTemplate","isPremium","setData","navigate","useNavigate","useEffect","AppRoutes","MINI_SITE","mst","Header","Footer","PostFooter","MiniSiteShopPage","dataMini"],"sourceRoot":""}