{"version":3,"file":"739-e64555c24c09743bdc69.js","mappings":"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","sources":["webpack://webia_front/./src/templatesReact/miniSiteGalleryTemplate/AddPhotoItemModalContent.tsx","webpack://webia_front/./src/templatesReact/miniSiteGalleryTemplate/AddPhotoItemModal.tsx","webpack://webia_front/./src/templatesReact/miniSiteGalleryTemplate/RemovePhotoItemModalContent.tsx","webpack://webia_front/./src/templatesReact/miniSiteGalleryTemplate/RemovePhotoItemModal.tsx","webpack://webia_front/./src/templatesReact/miniSiteGalleryTemplate/Content.tsx","webpack://webia_front/./src/templatesReact/miniSiteGalleryTemplate/MiniSiteGalleryTemplate.tsx","webpack://webia_front/./src/pagesReact/miniSiteGalleryPage/MiniSiteGalleryPage.tsx"],"sourcesContent":["import mscs from '../miniSiteCommon/styleCommon/style.module.scss';\nimport React, { memo, useContext, useState } from 'react';\nimport { CustomButton } from 'components/CustomButton/CustomButton';\nimport { MiniSiteContext } from 'templatesReact/miniSiteCommon/Context';\nimport { CustomInput } from 'components/CustomInput/CustomInput';\nimport { CustomSelectFile } from 'components/CustomInput/CustomSelectFile';\nimport { generateUUID } from 'utils/utils';\nimport { PhotoItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = {\n  onClose: () => void\n  selectedItem?: PhotoItemT\n}\n\nconst AddPhotoItemModalContent = memo((props: PropsT) => {\n  const {\n    onClose,\n    selectedItem,\n  } = props;\n\n  const { editPhotoItem, addPhotoItem } = useContext(MiniSiteContext);\n\n  const [currentLabel, setCurrentLabel] = useState<string>(selectedItem\n    ? selectedItem.comment!\n    : ''\n  );\n  const [currentImage, setCurrentImage] = useState<string | undefined>(\n    selectedItem?.imageUrl\n  );\n\n  const submit = () => {\n    if (!currentImage) return;\n    if (selectedItem) {\n      editPhotoItem(\n        selectedItem.id,\n        {\n          id: selectedItem.id,\n          comment: currentLabel,\n          imageUrl: currentImage,\n          date: new Date(),\n        }\n      );\n      onClose();\n      return;\n    }\n    addPhotoItem({\n      id: generateUUID(),\n      comment: currentLabel,\n      imageUrl: currentImage,\n      date: new Date(),\n    });\n    onClose();\n  };\n\n  return (\n    <div className={mscs.modalBody}>\n      <CustomSelectFile\n        htmlFor=\"newPhoto\"\n        value={currentImage}\n        onChange={setCurrentImage}\n        variant='box'\n        label='Upload new photo'\n      />\n\n      <CustomInput\n        placeholder='Add comment'\n        value={currentLabel}\n        onChange={setCurrentLabel}\n      />\n\n      <div className={mscs.modalButtonContainer}>\n        <CustomButton\n          text=\"Cancel\"\n          variant='outline'\n          size='l'\n          width='standard'\n          onClick={onClose}\n        />\n        <CustomButton\n          text={selectedItem ? 'Save changes' : 'Add photo'}\n          variant='action'\n          size='l'\n          width='standard'\n          onClick={submit}\n        />\n      </div>\n    </div>\n  );\n});\n\nexport { AddPhotoItemModalContent };\n","import { Modal, ModalPublicProps } from 'components/modal/Modal';\nimport { useToggle } from 'hooks/useToggle';\nimport { AddPhotoItemModalContent } from './AddPhotoItemModalContent';\nimport { memo } from 'react';\nimport { PhotoItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = ModalPublicProps & {\n  selectedItem?: PhotoItemT;\n}\n\nconst AddPhotoItemModal = memo((props: PropsT) => {\n  const {\n    className,\n    isOpen,\n    onClose,\n    onOverlay,\n    onEscape,\n    selectedItem,\n  } = props;\n\n  const [triggerClosing, onTriggerClosing] = useToggle(false);\n\n  return (\n    <Modal\n      className={className}\n      title={selectedItem\n        ? selectedItem.comment\n        : 'New photo'\n      }\n      widthSize='xl'\n      isOpen={isOpen}\n      onClose={onClose}\n      onOverlay={onOverlay}\n      onEscape={onEscape}\n      triggerClosing={triggerClosing}\n      onTriggerClosing={onTriggerClosing}\n    >\n      <AddPhotoItemModalContent\n        onClose={onTriggerClosing}\n        selectedItem={selectedItem}\n      />\n    </Modal>\n  );\n});\n\nexport { AddPhotoItemModal };\n","import mscs from '../miniSiteCommon/styleCommon/style.module.scss';\nimport React, { memo, useContext } from 'react';\nimport { CustomButton } from 'components/CustomButton/CustomButton';\nimport { MiniSiteContext } from 'templatesReact/miniSiteCommon/Context';\nimport { PhotoItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = {\n  onClose: () => void\n  selectedItem?: PhotoItemT\n}\n\nconst RemovePhotoItemModalContent = memo((props: PropsT) => {\n  const {\n    onClose,\n    selectedItem,\n  } = props;\n\n  const { removePhotoItem } = useContext(MiniSiteContext);\n\n  const submit = () => {\n    if (!selectedItem) return;\n    removePhotoItem(selectedItem.id);\n    onClose();\n  };\n\n  return (\n    <div className={mscs.modalBody}>\n      <div className={mscs.modalRemoveText}>\n        It will be deleted permanently. But you can always add a new one.\n      </div>\n\n      <div className={`${mscs.modalButtonContainer} ${mscs.modalButtonCenter}`}>\n        <CustomButton\n          text=\"Cancel\"\n          variant='outline'\n          size='l'\n          width='standard'\n          onClick={onClose}\n        />\n        <CustomButton\n          text=\"Remove\"\n          variant='action'\n          size='l'\n          width='standard'\n          onClick={submit}\n        />\n      </div>\n    </div>\n  );\n});\n\nexport { RemovePhotoItemModalContent };\n","import { Modal, ModalPublicProps } from 'components/modal/Modal';\nimport { useToggle } from 'hooks/useToggle';\nimport { memo } from 'react';\nimport { RemovePhotoItemModalContent } from './RemovePhotoItemModalContent';\nimport { PhotoItemT } from 'templatesReact/miniSiteCommon/types';\n\ntype PropsT = ModalPublicProps & {\n  selectedItem?: PhotoItemT;\n}\n\nconst RemovePhotoItemModal = memo((props: PropsT) => {\n  const {\n    className,\n    isOpen,\n    onClose,\n    onOverlay,\n    onEscape,\n    selectedItem,\n  } = props;\n\n  const [triggerClosing, onTriggerClosing] = useToggle(false);\n\n  return (\n    <Modal\n      className={className}\n      title={`Are you sure that you want to delete photo ${selectedItem?.comment}?`}\n      widthSize='xs'\n      isOpen={isOpen}\n      onClose={onClose}\n      onOverlay={onOverlay}\n      onEscape={onEscape}\n      triggerClosing={triggerClosing}\n      onTriggerClosing={onTriggerClosing}\n    >\n      <RemovePhotoItemModalContent\n        onClose={onTriggerClosing}\n        selectedItem={selectedItem}\n      />\n    </Modal>\n  );\n});\n\nexport { RemovePhotoItemModal };\n","import mscs from '../miniSiteCommon/styleCommon/style.module.scss';\nimport { memo, useContext, useState } from 'react';\nimport { Gallery } from '../miniSiteCommon/Gallery';\nimport { MiniSiteContext } from '../miniSiteCommon/Context';\nimport { CustomButton } from 'components/CustomButton/CustomButton';\nimport { AddPhotoItemModal } from './AddPhotoItemModal';\nimport { RemovePhotoItemModal } from './RemovePhotoItemModal';\nimport { PhotoItemT } from '../miniSiteCommon/types';\n\nconst Content = memo(() => {\n  const {\n    data: {\n      isEdit,\n      photos,\n    },\n  } = useContext(MiniSiteContext);\n\n  const [ isOpenAdd, setIsOpenAdd ] = useState<boolean>(false);\n  const [ isOpenRemove, setIsOpenRemove ] = useState<boolean>(false);\n  const [ selectedItem, setSelectedItem ] = useState<PhotoItemT | undefined>(undefined);\n\n  const selectItemForEdit = (id: string) => {\n    const foundedItem = photos.find(item => item.id === id);\n    if (foundedItem) {\n      setSelectedItem(foundedItem);\n      setIsOpenAdd(true);\n    }\n  };\n  const unselectItemForEdit = () => {\n    setSelectedItem(undefined);\n    setIsOpenAdd(false);\n  };\n\n  const selectItemForRemove = (id: string) => {\n    const foundedItem = photos.find(item => item.id === id);\n    if (foundedItem) {\n      setSelectedItem(foundedItem);\n      setIsOpenRemove(true);\n    }\n  };\n  const unselectItemForRemove = () => {\n    setSelectedItem(undefined);\n    setIsOpenRemove(false);\n  };\n\n  return (\n    <div className={mscs.contentBody}>\n      <div className={mscs.contentContainer}>\n        <Gallery\n          photos={photos}\n          isEdit={isEdit}\n          titleSize='l'\n          childrenMore={isEdit && <CustomButton\n            text=\"Add photo\"\n            variant='action'\n            size='l'\n            width='content'\n            onClick={() => setIsOpenAdd(true)}\n          />}\n          editCallback={selectItemForEdit}\n          removeCallback={selectItemForRemove}\n        />\n      </div>\n\n      <AddPhotoItemModal\n        isOpen={isOpenAdd}\n        onClose={unselectItemForEdit}\n        onOverlay={unselectItemForEdit}\n        onEscape={unselectItemForEdit}\n        selectedItem={selectedItem}\n      />\n      <RemovePhotoItemModal\n        isOpen={isOpenRemove}\n        onClose={unselectItemForRemove}\n        onOverlay={unselectItemForRemove}\n        onEscape={unselectItemForRemove}\n        selectedItem={selectedItem}\n      />\n    </div>\n  );\n});\n\nexport { Content };","import mst from '../miniSiteCommon/styleTemplate/style.module.scss';\nimport { Header } from '../miniSiteCommon/header';\nimport { Content } from './Content';\nimport { Footer } from '../miniSiteCommon/footer';\nimport { PostFooter } from '../miniSiteCommon/postfooter';\nimport { memo, useContext, useEffect } from 'react';\nimport { MiniSiteDataT } from 'templatesReact/miniSiteCommon/types';\nimport { MiniSiteContext } from 'templatesReact/miniSiteCommon/Context';\nimport MiniSiteProvider from 'templatesReact/miniSiteCommon/Provider';\nimport { useNavigate } from 'react-router-dom';\nimport { AppRoutes } from 'pagesReact';\n\nconst MiniSiteGalleryTemplate = memo((props: MiniSiteDataT) => {\n  return (\n    <MiniSiteProvider>\n      <_MiniSiteGalleryTemplate {...props} />.\n    </MiniSiteProvider>\n  );\n});\n\nconst _MiniSiteGalleryTemplate = memo((props: MiniSiteDataT) => {\n  const { data: { isPremium }, setData } = useContext(MiniSiteContext);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    setData && setData(props);\n  }, [props]);\n\n  if (!isPremium) {\n    navigate(AppRoutes.MINI_SITE);\n  }\n\n  return <main className={mst.body}>\n    <Header />\n    <Content />\n    <Footer />\n    <PostFooter />\n  </main>;\n});\n\nexport { MiniSiteGalleryTemplate };\n","import { MiniSiteGalleryTemplate } from 'templatesReact/miniSiteGalleryTemplate';\nimport { dataMini } from 'pagesReact/miniSitePage/MiniSitePage';\n\nconst MiniSiteGalleryPage = () => {\n  return (\n    <MiniSiteGalleryTemplate\n      {...dataMini}\n    />\n  );\n};\n\nexport default MiniSiteGalleryPage;\n"],"names":["AddPhotoItemModalContent","memo","props","onClose","selectedItem","editPhotoItem","addPhotoItem","useContext","MiniSiteContext","currentLabel","setCurrentLabel","useState","comment","currentImage","setCurrentImage","imageUrl","React","className","mscs","CustomSelectFile","htmlFor","value","onChange","variant","label","CustomInput","placeholder","CustomButton","text","size","width","onClick","submit","id","date","Date","generateUUID","AddPhotoItemModal","isOpen","onOverlay","onEscape","triggerClosing","onTriggerClosing","useToggle","createElement","Modal","title","widthSize","RemovePhotoItemModalContent","removePhotoItem","RemovePhotoItemModal","Content","data","isEdit","photos","isOpenAdd","setIsOpenAdd","isOpenRemove","setIsOpenRemove","setSelectedItem","undefined","unselectItemForEdit","unselectItemForRemove","Gallery","titleSize","childrenMore","editCallback","foundedItem","find","item","removeCallback","MiniSiteGalleryTemplate","MiniSiteProvider","_MiniSiteGalleryTemplate","isPremium","setData","navigate","useNavigate","useEffect","AppRoutes","MINI_SITE","mst","Header","Footer","PostFooter","MiniSiteGalleryPage","dataMini"],"sourceRoot":""}