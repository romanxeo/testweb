{"version":3,"file":"904-d232b127e92a1f5d29d1.js","mappings":"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","sources":["webpack://webia_front/./node_modules/react-otp-input/lib/index.esm.js","webpack://webia_front/./src/widgets/RecoverPassword/RecoverPassword.tsx","webpack://webia_front/./src/pagesReact/recoverPasswordPage/RecoverPasswordPage.tsx"],"sourcesContent":["import React from 'react';\n\nvar isStyleObject = function (obj) { return typeof obj === 'object' && obj !== null; };\nvar OTPInput = function (_a) {\n    var _b = _a.value, value = _b === void 0 ? '' : _b, _c = _a.numInputs, numInputs = _c === void 0 ? 4 : _c, onChange = _a.onChange, onPaste = _a.onPaste, renderInput = _a.renderInput, _d = _a.shouldAutoFocus, shouldAutoFocus = _d === void 0 ? false : _d, _e = _a.inputType, inputType = _e === void 0 ? 'text' : _e, renderSeparator = _a.renderSeparator, placeholder = _a.placeholder, containerStyle = _a.containerStyle, inputStyle = _a.inputStyle, _f = _a.skipDefaultStyles, skipDefaultStyles = _f === void 0 ? false : _f;\n    var _g = React.useState(0), activeInput = _g[0], setActiveInput = _g[1];\n    var inputRefs = React.useRef([]);\n    var getOTPValue = function () { return (value ? value.toString().split('') : []); };\n    var isInputNum = inputType === 'number' || inputType === 'tel';\n    React.useEffect(function () {\n        inputRefs.current = inputRefs.current.slice(0, numInputs);\n    }, [numInputs]);\n    React.useEffect(function () {\n        var _a;\n        if (shouldAutoFocus) {\n            (_a = inputRefs.current[0]) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n    }, [shouldAutoFocus]);\n    var getPlaceholderValue = function () {\n        if (typeof placeholder === 'string') {\n            if (placeholder.length === numInputs) {\n                return placeholder;\n            }\n            if (placeholder.length > 0) {\n                console.error('Length of the placeholder should be equal to the number of inputs.');\n            }\n        }\n        return undefined;\n    };\n    var isInputValueValid = function (value) {\n        var isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n        return isTypeValid && value.trim().length === 1;\n    };\n    var handleChange = function (event) {\n        var value = event.target.value;\n        if (isInputValueValid(value)) {\n            changeCodeAtFocus(value);\n            focusInput(activeInput + 1);\n        }\n    };\n    var handleInputChange = function (event) {\n        var nativeEvent = event.nativeEvent;\n        var value = event.target.value;\n        if (!isInputValueValid(value)) {\n            // Pasting from the native autofill suggestion on a mobile device can pass\n            // the pasted string as one long input to one of the cells. This ensures\n            // that we handle the full input and not just the first character.\n            if (value.length === numInputs) {\n                var hasInvalidInput = value.split('').some(function (cellInput) { return !isInputValueValid(cellInput); });\n                if (!hasInvalidInput) {\n                    handleOTPChange(value.split(''));\n                    focusInput(numInputs - 1);\n                }\n            }\n            // @ts-expect-error - This was added previously to handle and edge case\n            // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n            // still needed.\n            if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n                event.preventDefault();\n                changeCodeAtFocus('');\n                focusInput(activeInput - 1);\n            }\n            // Clear the input if it's not valid value because firefox allows\n            // pasting non-numeric characters in a number type input\n            event.target.value = '';\n        }\n    };\n    var handleFocus = function (event) { return function (index) {\n        setActiveInput(index);\n        event.target.select();\n    }; };\n    var handleBlur = function () {\n        setActiveInput(activeInput - 1);\n    };\n    var handleKeyDown = function (event) {\n        var otp = getOTPValue();\n        if ([event.code, event.key].includes('Backspace')) {\n            event.preventDefault();\n            changeCodeAtFocus('');\n            focusInput(activeInput - 1);\n        }\n        else if (event.code === 'Delete') {\n            event.preventDefault();\n            changeCodeAtFocus('');\n        }\n        else if (event.code === 'ArrowLeft') {\n            event.preventDefault();\n            focusInput(activeInput - 1);\n        }\n        else if (event.code === 'ArrowRight') {\n            event.preventDefault();\n            focusInput(activeInput + 1);\n        }\n        // React does not trigger onChange when the same value is entered\n        // again. So we need to focus the next input manually in this case.\n        else if (event.key === otp[activeInput]) {\n            event.preventDefault();\n            focusInput(activeInput + 1);\n        }\n        else if (event.code === 'Spacebar' ||\n            event.code === 'Space' ||\n            event.code === 'ArrowUp' ||\n            event.code === 'ArrowDown') {\n            event.preventDefault();\n        }\n    };\n    var focusInput = function (index) {\n        var _a, _b;\n        var activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n        if (inputRefs.current[activeInput]) {\n            (_a = inputRefs.current[activeInput]) === null || _a === void 0 ? void 0 : _a.focus();\n            (_b = inputRefs.current[activeInput]) === null || _b === void 0 ? void 0 : _b.select();\n            setActiveInput(activeInput);\n        }\n    };\n    var changeCodeAtFocus = function (value) {\n        var otp = getOTPValue();\n        otp[activeInput] = value[0];\n        handleOTPChange(otp);\n    };\n    var handleOTPChange = function (otp) {\n        var otpValue = otp.join('');\n        onChange(otpValue);\n    };\n    var handlePaste = function (event) {\n        var _a;\n        event.preventDefault();\n        var otp = getOTPValue();\n        var nextActiveInput = activeInput;\n        // Get pastedData in an array of max size (num of inputs - current position)\n        var pastedData = event.clipboardData\n            .getData('text/plain')\n            .slice(0, numInputs - activeInput)\n            .split('');\n        // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n        if (isInputNum && pastedData.some(function (value) { return isNaN(Number(value)); })) {\n            return;\n        }\n        // Paste data from focused input onwards\n        for (var pos = 0; pos < numInputs; ++pos) {\n            if (pos >= activeInput && pastedData.length > 0) {\n                otp[pos] = (_a = pastedData.shift()) !== null && _a !== void 0 ? _a : '';\n                nextActiveInput++;\n            }\n        }\n        focusInput(nextActiveInput);\n        handleOTPChange(otp);\n    };\n    return (React.createElement(\"div\", { style: Object.assign({ display: 'flex', alignItems: 'center' }, isStyleObject(containerStyle) && containerStyle), className: typeof containerStyle === 'string' ? containerStyle : undefined, onPaste: onPaste }, Array.from({ length: numInputs }, function (_, index) { return index; }).map(function (index) {\n        var _a, _b, _c;\n        return (React.createElement(React.Fragment, { key: index },\n            renderInput({\n                value: (_a = getOTPValue()[index]) !== null && _a !== void 0 ? _a : '',\n                placeholder: (_c = (_b = getPlaceholderValue()) === null || _b === void 0 ? void 0 : _b[index]) !== null && _c !== void 0 ? _c : undefined,\n                ref: function (element) { return (inputRefs.current[index] = element); },\n                onChange: handleChange,\n                onFocus: function (event) { return handleFocus(event)(index); },\n                onBlur: handleBlur,\n                onKeyDown: handleKeyDown,\n                onPaste: handlePaste,\n                autoComplete: 'off',\n                'aria-label': \"Please enter OTP character \".concat(index + 1),\n                style: Object.assign(!skipDefaultStyles ? { width: '1em', textAlign: 'center' } : {}, isStyleObject(inputStyle) ? inputStyle : {}),\n                className: typeof inputStyle === 'string' ? inputStyle : undefined,\n                type: inputType,\n                inputMode: isInputNum ? 'numeric' : 'text',\n                onInput: handleInputChange,\n            }, index),\n            index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator)));\n    })));\n};\n\nexport { OTPInput as default };\n//# sourceMappingURL=index.esm.js.map\n","import React, { useState } from 'react';\nimport s from './RecoverPassword.module.scss';\nimport { CustomButton } from 'components/CustomButton/CustomButton';\nimport arrowRight from 'images/arrowRight.svg';\nimport OtpInput from 'react-otp-input';\n\nconst RecoverPassword = () => {\n  const [otp, setOtp] = useState('');\n\n  return (\n    <div className={s.container}>\n      <div className={s.header}>\n        <div className={s.authName}>\n          Recover password\n        </div>\n        <div className={s.authDescription}>\n          Enter a code we’ve send on your email address\n        </div>\n      </div>\n      <div className={s.form}>\n        <OtpInput\n          value={otp}\n          onChange={setOtp}\n          numInputs={5}\n          renderSeparator={<span> </span>}\n          renderInput={(props) => <input {...props} />}\n          inputStyle={s.otpCell}\n          containerStyle={s.otpContainer}\n          inputType={'tel'}\n        />\n      </div>\n      <CustomButton\n        variant='primary'\n        text={'Get a code'}\n        image={arrowRight}\n        imagePos='end'\n      />\n      <div className={s.footer}>\n        <div className={s.text}>\n          Didn’t receive any code? <div className={s.textLink}> Resend it </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RecoverPassword;","import React from 'react';\nimport { welcomeBackText } from 'utils/mockData';\nimport RecoverPassword from 'widgets/RecoverPassword';\nimport { AuthTemplate } from 'templatesReact/authTemplate/AuthTemplate';\n\nconst RecoverPasswordPage = () => {\n  return (\n    <AuthTemplate\n      title={welcomeBackText.title}\n      textBody={welcomeBackText.textBody}\n    >\n      <RecoverPassword/>\n    </AuthTemplate>\n  );\n};\n\nexport default RecoverPasswordPage;"],"names":["isStyleObject","obj","OTPInput","_a","_b","value","_c","numInputs","onChange","onPaste","renderInput","_d","shouldAutoFocus","_e","inputType","renderSeparator","placeholder","containerStyle","inputStyle","_f","skipDefaultStyles","_g","activeInput","setActiveInput","inputRefs","getOTPValue","toString","split","isInputNum","current","slice","focus","getPlaceholderValue","length","console","error","isInputValueValid","isNaN","Number","trim","handleChange","event","target","changeCodeAtFocus","focusInput","handleInputChange","nativeEvent","some","cellInput","handleOTPChange","data","preventDefault","handleBlur","handleKeyDown","otp","code","key","includes","index","Math","max","min","select","otpValue","join","handlePaste","nextActiveInput","pastedData","clipboardData","getData","pos","shift","style","Object","assign","display","alignItems","className","undefined","Array","from","_","map","ref","element","onFocus","handleFocus","onBlur","onKeyDown","autoComplete","concat","width","textAlign","type","inputMode","onInput","RecoverPassword","setOtp","useState","React","s","OtpInput","props","CustomButton","variant","text","image","arrowRight","imagePos","RecoverPasswordPage","AuthTemplate","title","welcomeBackText","textBody"],"sourceRoot":""}