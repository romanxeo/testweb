{"version":3,"file":"component---src-pages-gatsby-login-tsx-36466d4c21b6e3053165.js","mappings":"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","sources":["webpack://webia_front/./src/components/CustomButton/style.module.scss","webpack://webia_front/./src/components/CustomButton/styleProvider.ts","webpack://webia_front/./src/components/CustomButton/CustomButton.tsx","webpack://webia_front/./src/gatsby/seo.tsx","webpack://webia_front/./src/pagesGatsby/login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var action = \"style-module__action___L26os\";\nexport var auto = \"style-module__auto___5WBhn\";\nexport var button = \"style-module__button___Xa4xz\";\nexport var clear = \"style-module__clear___lOnVp\";\nexport var clearBlack = \"style-module__clearBlack___gFBVL\";\nexport var clearRed = \"style-module__clearRed___jQTj6\";\nexport var clearWhite = \"style-module__clearWhite___JRtCB\";\nexport var content = \"style-module__content___w0PrX\";\nexport var disabled = \"style-module__disabled___ZJn3m\";\nexport var editButton = \"style-module__editButton___QsG0I\";\nexport var full = \"style-module__full___Aqh2C\";\nexport var idle = \"style-module__idle___mra-A\";\nexport var l = \"style-module__l___4sspp\";\nexport var m = \"style-module__m___yEupx\";\nexport var none = \"style-module__none___1iRbh\";\nexport var outline = \"style-module__outline___jguXj\";\nexport var outlineWhite = \"style-module__outlineWhite___AhgZX\";\nexport var primary = \"style-module__primary___nwU2g\";\nexport var span = \"style-module__span___tHIG5\";\nexport var standard = \"style-module__standard___FiXSn\";","import s from './style.module.scss';\nimport * as gs from './style.module.scss';\n\nexport default __IS_REACT__ ? s : gs;","import React, { ButtonHTMLAttributes, CSSProperties, ReactNode } from 'react';\nimport s from './styleProvider';\n\ntype Variant = 'primary'\n  | 'outline'\n  | 'outlineWhite'\n  | 'action'\n  | 'clear'\n  | 'clearWhite'\n  | 'clearBlack'\n  | 'clearRed'\n  | 'disabled'\n  | 'idle';\n\ninterface CustomButtonProps extends ButtonHTMLAttributes<HTMLButtonElement>{\n  text?: ReactNode;\n  style?: CSSProperties\n  variant?: Variant;\n  size?: 'none' | 'm' | 'l'\n  image?: React.FunctionComponent<React.SVGAttributes<SVGElement>> | null;\n  imagePos?: 'start' | 'end';\n  width?: 'full' | 'auto' | 'content' | 'standard';\n  isEdit?: boolean\n  className?: string;\n}\n\nconst CustomButton: React.FC<CustomButtonProps> = (props) => {\n  const {\n    text,\n    style,\n    variant = 'primary',\n    size = 'l',\n    image: Image,\n    imagePos,\n    width = 'full',\n    isEdit = false,\n    onClick,\n    className,\n    ...otherProps\n  } = props;\n\n  const bodyStyle = `${\n    s.button\n  } ${\n    s[variant]\n  } ${\n    s[size]\n  } ${\n    s[width]\n  } ${\n    isEdit && s.editButton\n  } ${\n    className\n  }`;\n\n  return (\n    <button\n      style={style}\n      className={bodyStyle}\n      onClick={onClick}\n      {...otherProps}\n    >\n      {imagePos === 'start' && Image && <Image />}\n      {text && <span className={s.span}>{text}</span>}\n      {imagePos === 'end' && Image && <Image />}\n    </button>\n  );\n};\n\nexport { CustomButton };\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { ReactNode } from 'react';\n\ntype PropsType = {\n  description?: string\n  title?: string\n  children?: ReactNode\n}\n\nfunction Seo(props: PropsType) {\n  const {\n    description,\n    title,\n    children,\n  } = props;\n\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ''} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  );\n}\n\nexport default Seo;\n","import React, { useState } from 'react';\nimport { PageProps, Link, graphql, HeadFC } from 'gatsby';\n// import Layout from \"../components/layout\"\nimport Seo from '../gatsby/seo';\nimport { CustomButton } from 'components/CustomButton/CustomButton';\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  location,\n}) => {\n\n  const [inc, setInc] = useState(0);\n\n  return(\n    <div>\n      <CustomButton text={'GGAG1'} />\n      <h1>\n        LOGIN Gatsby supports <b style={{ color: 'red' }}>TypeScript by default</b>\n        <button onClick={() => setInc(inc+1)}>inc 312 - {inc}</button>\n      </h1>\n      <p>\n        This means that you can create and write <code>.ts/.tsx</code> files for\n        your pages, components, and <code>gatsby-*</code> configuration files (for\n        example <code>gatsby-config.ts</code>).\n      </p>\n      <p>\n        For type checking youll want to install <code>typescript</code> via npm\n        and run <code>tsc --init</code> to create a <code>tsconfig</code> file.\n      </p>\n      <p>\n        Youre currently on the page <code>{location.pathname}</code> which was\n        built on {data.site.buildTime}.\n      </p>\n      <p>\n        To learn more, head over to our{' '}\n        <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n          documentation about TypeScript\n        </a>\n        .\n      </p>\n      <Link to=\"/\">Go back to the homepage</Link>\n      <Link to=\"/login\">Go back to the login</Link>\n      <Link to=\"/signup\">Go back to the signup</Link>\n    </div>\n  );};\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript 1\" />;\n\nexport default UsingTypescript;\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`;\n"],"names":["action","auto","clear","clearBlack","clearRed","clearWhite","content","disabled","editButton","full","idle","l","m","none","outline","outlineWhite","primary","span","standard","gs","CustomButton","props","text","style","variant","size","image","Image","imagePos","width","isEdit","onClick","className","otherProps","bodyStyle","s","button","React","Object","assign","_site$siteMetadata","_site$siteMetadata2","description","title","children","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","property","author","Head","Seo","_ref","data","location","inc","setInc","useState","color","pathname","buildTime","href","Link","to"],"sourceRoot":""}