{"version":3,"file":"736-f8295f799c74fc42855e.js","mappings":"2OAOO,MAAMA,EAAuBC,IAAuB,IAADC,EAAA,IAArB,aAAEC,GAAcF,EACnD,MAAMG,GAAWC,EAAAA,EAAAA,QAAgC,MAQjD,OACEC,MAAAC,cAAA,SAAOC,UAAWC,EAAAA,QAAAA,WAChBH,MAAAC,cAAA,UACEC,UAAWC,EAAAA,QAAAA,OACXC,QAVwBC,KACxBP,EAASQ,SACXR,EAASQ,QAAQC,OACnB,GAQG,eAIDP,MAAAC,cAAA,SACEO,SAAUX,EACVY,IAAKX,EACLI,UAAWC,EAAAA,QAAAA,MACXO,KAAK,OACLC,KAAK,WAGPX,MAAAC,cAAA,OAAKC,UAAWC,EAAAA,QAAAA,aACdH,MAAAC,cAAA,QAAMC,UAAWC,EAAAA,QAAAA,MACC,QAAhBP,EAAAE,EAASQ,eAAO,IAAAV,GAAhBA,EAAkBgB,MACdd,EAASQ,QAAQM,MAAM,GAAGD,KAC1B,uBAIF,E,cCYZ,MA7CwBE,KACtB,MAAM,EAACC,EAAS,EAACC,IAAeC,EAAAA,EAAAA,UAAS,KACnC,EAACC,EAAM,EAACC,IAAYF,EAAAA,EAAAA,UAA0B,MAEpDG,QAAQC,IAAI,MAAOH,GAYnB,OACEjB,EAAAA,cAACqB,EAAAA,EAAgB,KACfrB,EAAAA,cAAA,OAAKE,UAAWC,EAAAA,QAAAA,WACdH,EAAAA,cAAA,MAAIE,UAAWC,EAAAA,QAAAA,OAAS,WAExBH,EAAAA,cAAA,OAAKE,UAAWC,EAAAA,QAAAA,QACdH,EAAAA,cAACN,EAAS,CAACG,aAhBQyB,IACzB,MAAM,MAAEV,GAAUU,EAAMC,OACxB,GAAIX,GAASA,EAAM,GAAI,CACrB,MAAMY,EAAW,IAAIC,SACrBD,EAASE,OAAO,SAAUd,EAAM,IAEhCM,EAASM,EACX,KAWMxB,EAAAA,cAAC2B,EAAAA,EAAW,CACVC,YAAa,YACbC,MAAOf,EACPN,SAAUO,KAIdf,EAAAA,cAAC8B,EAAAA,EAAY,CACXC,KAAK,eACLC,QAAQ,UACRC,KAAK,IACLC,MAAM,OACNjB,MAAOkB,IACPC,SAAS,MACThC,QAASA,IAAMe,QAAQC,IAAI,WAGd,C,yGC5CvB,MAAMiB,EAAO,CACX,CAAEC,GAAI,EAAGC,KAAMC,EAAAA,EAAUC,qBAAsBV,KAAM,WACrD,CAAEO,GAAI,EAAGC,KAAMC,EAAAA,EAAUE,qBAAsBX,KAAM,WACrD,CAAEO,GAAI,EAAGC,KAAMC,EAAAA,EAAUG,sBAAuBZ,KAAM,YACtD,CAAEO,GAAI,EAAGC,KAAMC,EAAAA,EAAUI,kBAAmBb,KAAM,iBAkCpD,MA3BqBpC,IAEN,IAFO,SACpBkD,GACOlD,EAEP,OACEK,EAAAA,cAAA,OAAKE,UAAWC,EAAAA,QAAAA,WACdH,EAAAA,cAAA,MAAIE,UAAWC,EAAAA,QAAAA,OAAS,YAExBH,EAAAA,cAAA,OAAKE,UAAWC,EAAAA,QAAAA,eACbkC,EAAKS,KAAIC,GAEN/C,EAAAA,cAACgD,EAAAA,GAAO,CACNC,IAAKF,EAAIT,GACTY,GAAIH,EAAIR,KACRrC,UAAWiD,IAAA,IAAC,SAAEC,GAAUD,EAAA,OAAQhD,EAAAA,QAAAA,IAAK,KAAIiD,GAAYjD,EAAAA,QAAAA,UAAW,GAE/D4C,EAAIhB,SAMZc,EACG,C","sources":["webpack://webia_front/./src/components/InputFile/InputFile.tsx","webpack://webia_front/./src/pagesReact/settingsProfile/SettingsProfile.tsx","webpack://webia_front/./src/templatesReact/settingsTemplate/SettingsTemplate.tsx"],"sourcesContent":["import { ChangeEvent, FC, useRef } from 'react';\nimport s from './InputFile.module.scss';\n\ntype Props = {\n  handleChange: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const InputFile: FC<Props> = ({ handleChange }) => {\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const handleLoadButtonClick = () => {\n    if (inputRef.current) {\n      inputRef.current.click();\n    }\n  };\n\n  return (\n    <label className={s.container}>\n      <button\n        className={s.button}\n        onClick={handleLoadButtonClick}\n      >\n        Choose file\n      </button>\n\n      <input\n        onChange={handleChange}\n        ref={inputRef}\n        className={s.input}\n        type='file'\n        name='avatar'\n      />\n\n      <div className={s.textWrapper}>\n        <span className={s.text}>{\n          inputRef.current?.files\n            ? inputRef.current.files[0].name\n            : 'File is not chosen'\n        }\n        </span>\n      </div>\n    </label>\n  );\n};\n","import React, { ChangeEvent, useState } from 'react';\nimport s from '../../templatesReact/settingsTemplate/SettingsStyles.module.scss';\nimport { CustomButton } from 'components/CustomButton/CustomButton';\nimport { CustomInput } from 'components/CustomInput/CustomInput';\nimport chevronRight from '../../assets/svg/chevron-right.svg';\nimport { InputFile } from '../../components/InputFile';\nimport SettingsTemplate from 'templatesReact/settingsTemplate/SettingsTemplate';\n\nconst SettingsProfile = () => {\n  const [fullName, setFullName] = useState('');\n  const [image, setImage] = useState<FormData | null>(null);\n\n  console.log('---', image);\n\n  const handleImageChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { files } = event.target;\n    if (files && files[0]) {\n      const formData = new FormData();\n      formData.append('avatar', files[0]);\n\n      setImage(formData);\n    }\n  };\n\n  return (\n    <SettingsTemplate>\n      <div className={s.container}>\n        <h4 className={s.title}>Profile</h4>\n\n        <div className={s.fields}>\n          <InputFile handleChange={handleImageChange} />\n\n          <CustomInput\n            placeholder={'Full name'}\n            value={fullName}\n            onChange={setFullName}\n          />\n        </div>\n\n        <CustomButton\n          text=\"Save changes\"\n          variant='primary'\n          size='l'\n          width='full'\n          image={chevronRight}\n          imagePos='end'\n          onClick={() => console.log('save')}\n        />\n      </div>\n    </SettingsTemplate>\n  );\n};\n\nexport default SettingsProfile;","import React, { ReactNode } from 'react';\nimport s from './SettingsPage.module.scss';\nimport { NavLink } from 'react-router-dom';\nimport { AppRoutes } from 'pagesReact';\n\nconst tabs = [\n  { id: 1, path: AppRoutes.SETTINGS_TAB_GENERAL, text: 'General' },\n  { id: 2, path: AppRoutes.SETTINGS_TAB_PROFILE, text: 'Profile' },\n  { id: 3, path: AppRoutes.SETTINGS_TAB_PASSWORD, text: 'Password' },\n  { id: 4, path: AppRoutes.SETTINGS_TAB_PLAN, text: 'Plan&Billing' },\n];\n\ntype PropsT = {\n  children: ReactNode;\n}\n\nconst SettingsPage = ({\n  children,\n}: PropsT) => {\n\n  return (\n    <div className={s.container}>\n      <h1 className={s.title}>Settings</h1>\n\n      <div className={s.tabsContainer}>\n        {tabs.map(tab => {\n          return (\n            <NavLink\n              key={tab.id}\n              to={tab.path}\n              className={({ isActive }) => `${s.tab} ${isActive && s.tabActive}`}\n            >\n              {tab.text}\n            </NavLink>\n          );\n        })}\n      </div>\n\n      {children}\n    </div>\n  );\n};\n\nexport default SettingsPage;"],"names":["InputFile","_ref","_inputRef$current","handleChange","inputRef","useRef","React","createElement","className","s","onClick","handleLoadButtonClick","current","click","onChange","ref","type","name","files","SettingsProfile","fullName","setFullName","useState","image","setImage","console","log","SettingsTemplate","event","target","formData","FormData","append","CustomInput","placeholder","value","CustomButton","text","variant","size","width","chevronRight","imagePos","tabs","id","path","AppRoutes","SETTINGS_TAB_GENERAL","SETTINGS_TAB_PROFILE","SETTINGS_TAB_PASSWORD","SETTINGS_TAB_PLAN","children","map","tab","NavLink","key","to","_ref2","isActive"],"sourceRoot":""}